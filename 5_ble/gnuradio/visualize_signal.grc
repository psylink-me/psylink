options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: grcmyocular
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: points
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [284, 16]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [188, 17]
    rotation: 0
    state: enabled
- name: block_BLE_source
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nimport math\nimport BLE_GATT\nimport time\n\
      import importlib\nimport os.path\nimport sys\nfrom threading import Thread,\
      \ Event\nfrom queue import Queue\nfrom gnuradio import gr\n\n# NOTE: fill in\
      \ the path to the pymyocular library\nsys.path.insert(0, os.path.expanduser('~/repos/myocular/5_ble'))\n\
      import pymyocular\n\nBLUETOOTH_ADAPTER = 'hci0'\nMY_MAC = 'A6:B7:D0:AE:C2:76'\n\
      MY_CHR_UUID = '0a3d3fd8-2f1c-46fd-bf46-eaef2fda91e5'\nSIGNAL_COUNT = 1\nSAMPLE_RATE\
      \ = 1000\nUSE_BLE = True\n\n\ndef run_bluetooth_loop(device, sample_pipe, stop_thread):\n\
      \    device.connect()\n    fps = 0\n    bps = 0\n    nextfps = time.time() +\
      \ 1\n    try:\n        while not stop_thread.is_set():\n            read = device.char_read(MY_CHR_UUID)\n\
      \            print('[BLE] Received a packet of length %d' % len(read))\n   \
      \         data = pymyocular.decode_ble_packet(read)\n            samples = data['samples']\n\
      \            for sample in samples:\n                sample_pipe.put(sample)\n\
      \n            bps += len(read)\n            fps += len(samples)\n          \
      \  if time.time() >= nextfps:\n                print(f\"FPS: {fps}, BPS: {bps}\"\
      )\n                nextfps += 1\n                fps = 0\n                bps\
      \ = 0\n    finally:\n        device.disconnect()\n\n\nclass BLESource(gr.basic_block):\n\
      \    def __init__(self, ble_mac=MY_MAC, characteristic_uuid=MY_CHR_UUID):\n\
      \        gr.basic_block.__init__(self, name='BLE Source', in_sig=[], out_sig=[np.float32]\
      \ * SIGNAL_COUNT)\n        self.ble_mac = ble_mac\n        self.characteristic_uuid\
      \ = characteristic_uuid\n        self.sample_pipe = Queue()\n        self.stop_thread\
      \ = Event()\n        self.device = BLE_GATT.Central(MY_MAC)\n        self._bt_thread\
      \ = None\n\n    def general_work(self, input_items, output_items):\n       \
      \ count = 0\n        if USE_BLE:\n            for i in range(min(100, len(output_items[0]))):\n\
      \                if self.sample_pipe.empty():\n                    break\n \
      \               channels = self.sample_pipe.get()\n                for channel,\
      \ samples in enumerate(channels):\n                    output_items[channel][i]\
      \ = samples\n                count += 1\n        else:\n            for i in\
      \ range(min(100, len(output_items[0]))):\n                output_items[0][i]\
      \ = math.sin(i)\n                count += 1\n        return count\n\n    def\
      \ start(self):\n        if not USE_BLE:\n            return True\n        if\
      \ self._bt_thread:\n            print(\"Error: Bluetooth Thread already running!\"\
      )\n            return False\n\n        # Reset state\n        importlib.reload(pymyocular)\n\
      \        self.stop_thread.clear()\n        while not self.sample_pipe.empty():\n\
      \            self.sample_pipe.get()\n\n        # Launch thread\n        self._bt_thread\
      \ = Thread(\n            target=run_bluetooth_loop,\n            args=(self.device,\
      \ self.sample_pipe, self.stop_thread)\n        )\n        self._bt_thread.start()\n\
      \        return True\n\n    def stop(self):\n        if not USE_BLE:\n     \
      \       return True\n        self.stop_thread.set()\n        self._bt_thread\
      \ = None\n\n        return True\n"
    affinity: ''
    alias: ''
    ble_mac: '''A6:B7:D0:AE:C2:76'''
    characteristic_uuid: '''0a3d3fd8-2f1c-46fd-bf46-eaef2fda91e5'''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BLE Source', 'BLESource', [('ble_mac', "'A6:B7:D0:AE:C2:76'"), ('characteristic_uuid',
      "'0a3d3fd8-2f1c-46fd-bf46-eaef2fda91e5'")], [], [('0', 'float', 1)], '', ['ble_mac',
      'characteristic_uuid'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [89, 122]
    rotation: 180
    state: enabled
- name: block_shift
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nKeeps a copy of the last N signals and outputs them at\
      \ a constant rate,\nso that you can use QT GUI sinks in a \"rolling\" mode.\n\
      \"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\n\n\nclass ShiftBlock(gr.interp_block):\n\
      \    def __init__(self, number_of_points=1024):\n        gr.interp_block.__init__(\n\
      \            self,\n            name='Shifting Block',\n            interp=10\
      \ * number_of_points,  # a large number to ensure that output_items is large\
      \ enough\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.number_of_points = number_of_points\n        self.buffer\
      \ = np.zeros(self.number_of_points, dtype=np.float64)\n\n    def work(self,\
      \ input_items, output_items):\n        n_inputs = min(self.number_of_points,\
      \ len(input_items[0]))\n        self.buffer = np.roll(self.buffer, -n_inputs)\n\
      \        self.buffer[-n_inputs:] = input_items[0][:n_inputs]\n        output_items[0][:self.number_of_points]\
      \ = self.buffer\n        self.consume(0, n_inputs)\n        return self.number_of_points\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    number_of_points: points
  states:
    _io_cache: ('Shifting Block', 'ShiftBlock', [('number_of_points', '1024')], [('0',
      'float', 1)], [('0', 'float', 1)], '', ['number_of_points'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 190]
    rotation: 0
    state: true
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: points
    freqhalf: 'False'
    grid: 'True'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: float
    units: dB
    update_time: '0.05'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '40'
    ymin: '-100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [380, 226]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'True'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '3'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: points
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '2'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.05'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '128'
    ymin: '-128'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [382, 103]
    rotation: 0
    state: enabled

connections:
- [block_BLE_source, '0', block_shift, '0']
- [block_shift, '0', qtgui_freq_sink_x_0, '0']
- [block_shift, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
